*, ::before, ::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    /* border: .1px solid red; */
}

html {
    font-size: 62.5%;
}

body {
    font-family: Baskervville, serif;
    color: linen;
    background-color: rgb(20, 30, 40);
}

h1 {
    font-family: Anton, sans-serif;
}

h2, h3, h4, h5, h6 {
    font-family: Raleway, sans-serif;
}

a {
    text-decoration: none;
    color: linen;
}

main {
    display: grid;
    /* grid-template-columns: 1fr 94rem 1fr; */
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
    row-gap: 3rem;
}

img {
    width: 100%;
    object-fit: cover;
}

hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
}

.heading { 
    grid-column: 2 / 3; 
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    row-gap: 1.5rem;
}

.hero {
    grid-column: 1 / -1;
    position: relative;
}

.text { 
    grid-column: 2 /3; 
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    column-width: 25rem;
    text-align: justify;
}

.hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
}

.hero-subtitle { font-size: 2.4rem;
    color: orangered;
    text-align: center;
}

.author { font-size: 2rem;
    font-family: Raleway, sans-serif;
}

.author-name a:hover { 
    background-color: #306203; 
}

.publish-date { 
    color: rgba(255, 255, 255, 0.5);
}

.social-icons { 
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    align-items: center;
}

.first-paragraph::first-letter {
    font-size: 6rem; 
    color: orangered;
    float: left;
    margin-right: 1rem;
}

.quote { color: #00beef;
    font-size: 2.4rem;
    text-align: center;
    font-family: Raleway, sans-serif;
}

.quote::before { 
    content: '" ';
    }

.quote::after { 
    content: ' "';
    } 

.text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;;
}

.lists {
    list-style-type: none;
    margin-top: 2rem;
}

.lists li {
    margin-bottom: 1.5rem;
}

.list-title, .list-subtitle {
    color: #00beef;
}

.image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(3, min-content);
    gap: 2rem;
    place-items: center;
}

.image-1, .image-3 {
    grid-column: 1 / -1;
}

@media only screen and (max-width: 720px) { 
    .image-wrapper {
        grid-template-columns: 1fr;
    }
}

@media only screen and (max-width: 600px) { 
    .text-with-images {
        grid-template-columns: 1fr;
    }
}

@media only screen and (max-width: 550px) {
    .hero-title  {
        font-size: 6rem; 
    } 
    
    .hero-subtitle, .author, .quote, .list-title {
        font-size: 1.8rem;
    }

    .social-icons { 
        font-size: 2rem;
    }

    .text { 
        font-size: 1.6rem;
    }
}

@media only screen and (max-width: 420px) {
    .hero-title {
        font-size: 4.5rem;
    }
}

/*
Now that the magazine layout is finished, you need to make it responsive.

Start with a 
@media query for only 
screen with a 
max-width of 
720px. Inside, create an 
.image-wrapper selector and give it a 
grid-template-columns property of 
1fr.

This will collapse the three images into one column on smaller screens.

------ 
Use the minmax function to make your columns responsive on any device.  
The minmax function takes two arguments, 
the first being the minimum value and the second being the maximum. 
These values could be a length, percentage, fr, or even a keyword like max-content.

Wrap each of your already defined values of the 
grid-template-columns property in a 
minmax function, using each value as the second argument. 
The first argument should be 
2rem, min-content, and 2rem respectively.
???
running tests
1. Your main selector should have a 
grid-template-columns property set to 
minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr).
// tests completed
---
Remember that the grid-column 
property determines which columns an element starts and ends at. 
There may be times where you are unsure of how many columns 
your grid will have, but you want an element to stop at the last column. 
To do this, you can use -1 for the end column.

.hero selector and give it a 
grid-column property set to 
1 / -1. 
This will tell the element to span the full width of the grid.
---
TYour magazine will have three primary sections. 
You already set the overall layout in the main rule, 
but you can adjust the placement in the child rules.

One option is the grid-column property, 
which is shorthand for 
grid-column-start and grid-column-end. 
The grid-column property tells the grid item which grid line to start and end at.

Create a .heading rule and 
set the grid-column property to 2 / 3. 
This will tell the .heading element to start at grid line 2 and end at grid line 3.
*/
