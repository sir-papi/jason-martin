html {
    box-sizing: border-box;
  }
  
*, *::before, *::after {
    box-sizing: inherit;
  }

#piano {
    background-color: #00471b;  
    width: 992px; 
    height: 290px; 
    margin: 80px auto; 
    padding: 90px 20px 0 20px;
    position: relative;
    border-radius: 10px;
}

.keys {
    background-color: #040404; 
    width: 949px; 
    height: 180px; 
    padding-left: 2px;
    overflow: hidden; /* so keys dont collapase w/ smaller browser window*/
}

.key {
    background-color: #ffffff;
    position: relative; 
    width: 41px;
    height: 175px; 
    margin: 2px; 
    float: left;
    border-radius: 0 0 3px 3px;
}

.key.black--key::after {
    background-color: #1d1e22;
    content: "";
    position: absolute;
    left: -18px;
    width: 32px;
    height: 100px;
    border-radius: 0 0 3px 3px;
}

.logo {
    width: 200px; 
    position: absolute; 
    top: 23px;
}

/*
The @media at-rule, also known as a media query, 
is used to conditionally apply CSS. 
Media queries are commonly used to apply CSS based 
on the viewport width using the max-width and min-width properties.

In the below example the padding is applied to the .card
 class when the viewport is 960px wide and below.

Example Code
@media (max-width: 960px) {
  .card {
    padding: 2rem;
  }
}
*/

@media (max-width: 768px) {
    #piano {
        width: 358px;
    }
    .keys {
        width: 318px;
    }
    .logo {
        width: 150px;
    }
}

/* this didnt work
@media (min-width: 769px) and (max-width: 1199px) {
    #piano {
        width: 675px;
    }
    .keys {
        width: 633px;
    }
}
1. Your second @media rule should have a #piano selector.
2. Your new #piano selector should have a width of 675px.
3. Your second @media rule should have a .keys selector.
4. Your new .keys selector should have a width of 633px.
// tests completed
*/

/* this did \_0_/ */

@media (max-width: 1199px) and (min-width: 769px) { 
    #piano { 
        width: 675px; 
    } 
    .keys { 
        width: 633px; 
    }
}


/*
Now that you have reset the html box model, 
you need to pass that on to the elements within as well. 
To do this, you can set the box-sizing property to inherit, 
which will tell the targeted elements to use the same value 
as the parent element.

You will also need to target the pseudo-elements, 
which are special keywords that follow a selector. 
The two pseudo-elements you will be using are the ::before 
and ::after pseudo-elements.

The ::before selector creates a pseudo-element 
which is the first child of the selected element, 
while the ::after selector creates a pseudo-element 
which is the last child of the selected element. 
These pseudo-elements are often used to create cosmetic content, 
which you will see later in this project.

For now, create a CSS selector to target all elements with *, 
and include the pseudo-elements with ::before and ::after. 
Set the box-sizing property to inherit.
*/
/*
Now it is time to use the pseudo-selectors you prepared for earlier. 
To create the black keys, add a new .key.black--key::after selector. 
This will target the elements with the class key black--key, 
and select the pseudo-element after these elements in the HTML.
*/

