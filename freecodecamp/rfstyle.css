body {
    height: 100vh;  
    width: 100%
    margin: 0;
    background-color: #1b1b32;
    color: #f5f6f7;
    font-family: Tahoma;
    font-size: 16px;
}

label { display: block; margin: 0.5rem 0; }

/* Center the h1 and p elements by giving them a margin of 1em auto. Then, align their text in the center as well. */

h1, p {
    margin: 1em auto;
    text-align: center;
}

/* 
Center the form element, by giving it a margin of 0 auto. 
Then, fix its size to a maximum width of 500px, and a minimum width of 300px. 
In between that range, allow it to have a width of 60vw. 
X- widened it to 800 - not sure what vw changed -X 
*/

form {
    margin: 0 auto;
    max-width: 500px;
    min-width: 300px;
    width: 60w;
    padding: 0 0 2em;
}

/* 
During development, it is useful to see the fieldset default borders.
However, they make the content appear too separated.

Remove the border, and add 2rem of padding only to the top and bottom of each fieldset.
Be sure to remove the padding from the left and right. 

p:last-of-type { }
That will select the last p element.
Create a new selector that targets the last fieldset element and set its border-bottom to none.
*/

fieldset {
    border: none;
    padding: 2rem 0;
    border-bottom: 3px solid #3b3b4f;
}

fieldset:last-of-type {
    border-bottom: none;
}   

/*
it would be nicer to have the label text appear above the form elements.
Select all input, textarea, and select elements, and make them take up the full width of their parent elements.
Also, add 10px of margin to the top of the selected elements. Set the other margins to 0.
*/

input, textarea, select {
    width: 100%;
    margin: 10px 0 0 0;
    min-height: 2em;
}   

/*
To make the input and textarea elements blend in with the background theme,
set their background-color to #0a0a23.
Then, give them a 1px, solid border with a color of #0a0a23.
...
Currently, if you type in the input or textarea elements,
you will not be able to see the text. 
Also, their height is too small to be easy to use.
Fix this, by setting the color to #ffffff, and setting their min-height to 2em.
*/

input, textarea {
    background-color: #0a0a23;
    border: 1px solid #0a0a23;
    color: #ffffff;
}

/*
You want the select element to remain with a white background,
but now it is not getting the same min-height as the input and textarea elements.
Move the min-height property and value so that all three element types have the same min-height value,
and the select element still has a white background.
*/
 
/* 
Select only the .inline elements, and give them width of unset.
This will remove the earlier rule which set all the input elements to width: 100%.
*/

.inline {
    width: unset;
    /* margin-top: 0;
    margin-bottom: 0;
    margin-left: 0;
    margin-right: 0.5em; */
    margin: 0 0.5em 0 0;
    vertical-align: middle;
}   

input[type="submit"] {
    display: block;
    width: 60%;
    min-width: 300px;
    margin: 1em auto;
    height: 2em;
    font-size: 1.1rem;
    background-color: #3b3b4f;
    border-color: white;
  }

/*
To style the submit button,
you can use an attribute selector,
which selects an element based on the given attribute value.
Here is an example:
Example Code
input[name="password"]
The above selects input elements with a name attribute value of password.
Now, use the attribute selector to style the submit button with a display of block, and a width of 60%.
*/

/*
Most browsers inject their own default CSS properties and values for different elements.
If you look closely, you might be able to notice the file input is smaller than the other text input elements. 
by default, a padding of 1px 2px is given to input elements you can type in.
Using another attribute selector,
style the input with a type of file to be the same padding as the other input elements.
*/

input[type="file"] {
        padding: 1px 2px;
    };

a {
    color: #dfdfe2;
  }

a:visited {
    color: #dfdfe2;
  }

a:hover {
    color: goldenrod;
  }