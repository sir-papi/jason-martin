
@media (prefers-reduced-motion: no-preference) {
    * {
        scroll-behavior: smooth;
    }
    }

body {
    background: #f5f6f7;
    color: #1b1b32;
    font-family: Helvetica;
    margin: 0;
  }
  
header {
    width: 100%;
    height: 50px;   
    background-color: #1b1b32;
    display: flex;
    justify-content: space-between;
    top: 0;
    align-items: center;
  }

#logo {
    width: max(10rem, 18vw); 
    background-color: #0a0a23; 
    padding: 0.4rem;
    aspect-ratio: 35 / 4;
  }

h1 {
    color: #f1be32;
    font-size: min(5vw, 1.2em);
    text-align: center;
}

section {
    width: 80%;
    max-width: 600px;
    margin: 0 auto 10px auto;
}

main {
    padding-top: 25px;
}

nav {
    width: 50%;
    max-width: 300px;
    height: 50px;
  }
  
nav > ul {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
    align-items: center;
    padding-inline-start: 0;
    margin-block: 0;
    height: 100%
  }
/*
The child combinator selector > is used between selectors to target only elements that
match the second selector and are a direct child of the first selector.
This can be helpful when you have deeply nested elements and want to control the scope of your styling.
Use the > selector to target the unordered list elements within the nav elements,
and use Flexbox to evenly space the children.
*/

nav > ul > li {
    color: #dfdfe2;
    margin: 0 0.2rem;
    padding: 0.2rem;
    display: block;
}

/* To make the navigation buttons look more like typical buttons, 
remove the underline from the anchor tags.
Then, create a new selector targeting the navigation list 
elements so that when the cursor hovers over them, 
the background color and text color are switched, 
and the cursor becomes a pointer.

// running tests
1. You should use the existing li > a selector to set the text-decoration to none.
2. You should use either the nav > ul > li:hover or nav li:hover selector to style the elements on hover.
3. You should give hovered li elements a background-color of #dfdfe2.
4. You should give hovered li elements a color of #1b1b32.
5. You should give hovered li elements a cursor of pointer.
// tests completed */

li > a {
    color: inherit; /* #c3c3eb */
    text-decoration: none;
}

nav li:hover {
    background-color: #dfdfe2;
    color: #1b1b32;
    cursor: pointer;
}

h1, h2 {
    font-family: Verdana; Tahoma;
}

h2 {
    border-bottom: 4px solid #dfdfe2;
    padding-top: 60px; margin-top: 0;
}

.info {
    padding: 10px 0 0 5px;
  }

.formrow {
    margin: 10px 0 0 0;
    padding: 0 10px;
}

input {
    font-size: 14px;
}

.info > label, .info > input  {
    display: inline-block;
}

label {
    text-align: right;
}

.question-block {
    text-align: left;
    display: block;
    width: 100%;
    margin-top: 20px;
    padding-top: 5px;
}


.question {
    padding-bottom: 0;
    border: none;
}

.answers-list {
    list-style: none;
    padding: 0;
    }

h3 {
    margin-top: 5px;
    padding-left: 15px;
    font-size: 1.375rem;
}

.info  input {
    width: 50%;
    text-align: left;
}

.info label {
    width: 10%;
    min-width: 55px;
}

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    clip-path: inset(50%);
    white-space: nowrap;
}

button {
    display: block;
    margin: 40px auto;
    width: 40%;
    padding: 15px;
    font-size: 1.438rem;
    background: #d0d0d5;
    border: 3px solid #3b3b4f;
}

footer {
    background-color: #2a2a40;
    display: flex;
    justify-content: center;
    align-items: center;
}

footer, footer a {
    color: #dfdfe2;
}

address {
    padding: 10px;
    text-align: center;
}

/* 
To prevent unnecessary repetition, 
target the before pseudo-element of the h3 element, 
and give it a content property of "Question #"
*/

h3::before {
    content: "Question #";
}

/* 
The .sr-only text is still visible. 
There is a common pattern to visually hide text for only screen readers to read.
This pattern is to set the following CSS properties:

Example Code:

position: absolute;
width: 1px;
height: 1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
clip-path: inset(50%);
white-space: nowrap;
*/